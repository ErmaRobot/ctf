Natas25

After a string of challenging, thought provoking, but relatively simple levels we get one of the more convoluted yet! There is a lot going on in level 25. First is a quote from the movie Bad Boy Bubby which my girlfriend and I are going to watch tonight. The next is this drop down menu that allows us to change the translation of the film from English to German. We also have a link to see the source code for the level. Looking at the code we see that the drop down menu makes a request to include a file. We are given the choice of /lang/en or /lang/de, but there is nothing stopping us from requsting another file. Except... This damn function safeinclude(). It removes '../' and throws an error when our filename contains the substring 'natas_webpass'. The first action is easily over came. '....//' becomes '../' after, and a second pass is not taken so '../' stays, easy. The second part is insurmountable. If safeinclude sees 'natas_webpass' in the given filename it quits, doesn't even try to include that file. 

We can't use safeinclude() to include our password file, but we can take a look at the logfile. Yes, this level has logging! So, we go up out of the language directory and in to the log directory with something like '....//logs/natas25_{session id}.log'. Looking at the source code some more we see the log format. Each event is written as time followed by User-Agent and then message.  Let's go back and take a look at those language files. loading them in the browser just shows a blank screen, but viewing the source shows that they are actually php code. They create 3 global variables: $__GREETING, $__MSG, and $__FOOTER which they fill with text. These variables are used on the index page to display that information. Well the logging function makes use of the User-Agent header. We can send whatever string we want using python requests, and there are no checks on the User-Agent data! We can send PHP code and define a global variable $__GREETING to be '$__GREETING=passthru("cat /etc/natas_webpass");' Now the next time we load our log file we are greeted with a lovely flag.

This level was really fun and challenging. It opened my eyes to all the various ways that data is transferred between a user and a site. We have sent tainted data through normal get and post requests. We have sent it through cookies. And now we have sent it through headers. Truly no peice of user provided data can be taken for granted as safe, and it shouldn't be used carelessly.

