Natas26

The step up in difficulty has been laudible. This level had several moving parts that I will go over starting with the method of ingress. First the page is intended to draw red lines over a black background by users submitting coordinates for the lines through via the url(GET). The line information is stored client side in the form of a serialized and base64 encoded cookie called drawing. This cookie being an encoded PHP object will be the launch point of our attack. Second looking at the code we see that there is a Logger class with a destructor function. Classes that implement _destructor() will run the method whenever they are destroyed. Usually when going out of scope, but I'm not entirely sure about PHP garbage collection. And everything gets destroyed when the script is done anyways. Basically this function will always be ran if there is at least one instance floating in memory. The class works by writing a starting message some number of given messages and an ending message. Third the site writes these image file into img/ which is accessible through the sites root directory. This will be where we collect our output.

These three parts will allow us to get to the flag. Lets write some PHP. We'll copy the beginning lines of the Logger class definition and set the private variables to things that will be beneficial to us. Logfile to 'img/flag.php'; Initmsg doesn't matter so empty string; Exitmsg to some dope php code. We use the serialize and base64 functions of PHP to encode an instance of our logger class and send that to natas26 as the cookie drawing. That dope PHP code I was talking about is stuff we have done a million times before now: <?php passthru("cat /etc/natas_webpass/natas27"); ?>. 

In theory that will give us the flag... However I hit a snag. Something went wrong when the site was unserializing. I tried some variations and found that using head instead of cat worked. Anyways the theory is correct.

